plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
}

android {
    namespace 'com.sipa.boot.sdk'
    compileSdk 33

    defaultConfig {
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                arguments '-DBUILD_TESTING=OFF', '-DANDROID_TOOLCHAIN=gcc'
                cFlags "-std=c11"
                abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.getSrcDirs()
    archiveClassifier = "sources"
}

publishing {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('gradle.properties').newInputStream())
    def mavenReleaseUrl = properties.getProperty('maven.url.release')
    def mavenSnapshotUrl = properties.getProperty('maven.url.snapshot')
    def packageVersion = properties.getProperty('maven.package.version')
    def mavenUrl = packageVersion.endsWith("SNAPSHOT") ? mavenSnapshotUrl : mavenReleaseUrl
    def mavenUsername = properties.getProperty('maven.username')
    def mavenPassword = properties.getProperty('maven.password')

    repositories {
        maven {
            credentials {
                username mavenUsername
                password mavenPassword
            }
            url mavenUrl
            allowInsecureProtocol = true
        }
    }

    publications {
        release(MavenPublication) {
            artifact sourceJar
            afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }
            version packageVersion
            artifactId 'sipa-boot-sdk-android'
            groupId = 'com.sipa.boot'
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    // 避免出现空节点或 artifactId=unspecified 的节点
                    if (it.group != null && (it.name != null && "unspecified" != it.name) && it.version != null) {
                        println "dependency=${it.toString()}"
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'implementation')
                    }
                }
            }

        }
    }
}
